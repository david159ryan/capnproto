// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: json-rpc.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "json.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d3a68cd48aa056ca);
CAPNP_DECLARE_SCHEMA(d0dd80fa25c37644);

}  // namespace schemas
}  // namespace capnp

namespace capnp {
namespace json {

struct RpcMessage {
  RpcMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    PARAMS,
    RESULT,
    ERROR,
  };
  struct Error;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3a68cd48aa056ca, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RpcMessage::Error {
  Error() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0dd80fa25c37644, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RpcMessage::Reader {
public:
  typedef RpcMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasJsonrpc() const;
  inline  ::capnp::Text::Reader getJsonrpc() const;

  inline bool hasId() const;
  inline  ::capnp::json::Value::Reader getId() const;

  inline bool hasMethod() const;
  inline  ::capnp::Text::Reader getMethod() const;

  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isParams() const;
  inline bool hasParams() const;
  inline  ::capnp::json::Value::Reader getParams() const;

  inline bool isResult() const;
  inline bool hasResult() const;
  inline  ::capnp::json::Value::Reader getResult() const;

  inline bool isError() const;
  inline bool hasError() const;
  inline  ::capnp::json::RpcMessage::Error::Reader getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RpcMessage::Builder {
public:
  typedef RpcMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasJsonrpc();
  inline  ::capnp::Text::Builder getJsonrpc();
  inline void setJsonrpc( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initJsonrpc(unsigned int size);
  inline void adoptJsonrpc(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownJsonrpc();

  inline bool hasId();
  inline  ::capnp::json::Value::Builder getId();
  inline void setId( ::capnp::json::Value::Reader value);
  inline  ::capnp::json::Value::Builder initId();
  inline void adoptId(::capnp::Orphan< ::capnp::json::Value>&& value);
  inline ::capnp::Orphan< ::capnp::json::Value> disownId();

  inline bool hasMethod();
  inline  ::capnp::Text::Builder getMethod();
  inline void setMethod( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMethod(unsigned int size);
  inline void adoptMethod(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMethod();

  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isParams();
  inline bool hasParams();
  inline  ::capnp::json::Value::Builder getParams();
  inline void setParams( ::capnp::json::Value::Reader value);
  inline  ::capnp::json::Value::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::capnp::json::Value>&& value);
  inline ::capnp::Orphan< ::capnp::json::Value> disownParams();

  inline bool isResult();
  inline bool hasResult();
  inline  ::capnp::json::Value::Builder getResult();
  inline void setResult( ::capnp::json::Value::Reader value);
  inline  ::capnp::json::Value::Builder initResult();
  inline void adoptResult(::capnp::Orphan< ::capnp::json::Value>&& value);
  inline ::capnp::Orphan< ::capnp::json::Value> disownResult();

  inline bool isError();
  inline bool hasError();
  inline  ::capnp::json::RpcMessage::Error::Builder getError();
  inline void setError( ::capnp::json::RpcMessage::Error::Reader value);
  inline  ::capnp::json::RpcMessage::Error::Builder initError();
  inline void adoptError(::capnp::Orphan< ::capnp::json::RpcMessage::Error>&& value);
  inline ::capnp::Orphan< ::capnp::json::RpcMessage::Error> disownError();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RpcMessage::Pipeline {
public:
  typedef RpcMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::json::Value::Pipeline getId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RpcMessage::Error::Reader {
public:
  typedef Error Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCode() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline bool hasData() const;
  inline  ::capnp::json::Value::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RpcMessage::Error::Builder {
public:
  typedef Error Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getCode();
  inline void setCode( ::int32_t value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline bool hasData();
  inline  ::capnp::json::Value::Builder getData();
  inline void setData( ::capnp::json::Value::Reader value);
  inline  ::capnp::json::Value::Builder initData();
  inline void adoptData(::capnp::Orphan< ::capnp::json::Value>&& value);
  inline ::capnp::Orphan< ::capnp::json::Value> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RpcMessage::Error::Pipeline {
public:
  typedef Error Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::json::Value::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::capnp::json::RpcMessage::Which RpcMessage::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::capnp::json::RpcMessage::Which RpcMessage::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RpcMessage::Reader::hasJsonrpc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasJsonrpc() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RpcMessage::Reader::getJsonrpc() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RpcMessage::Builder::getJsonrpc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::setJsonrpc( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RpcMessage::Builder::initJsonrpc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RpcMessage::Builder::adoptJsonrpc(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RpcMessage::Builder::disownJsonrpc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::Value::Reader RpcMessage::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::json::Value::Pipeline RpcMessage::Pipeline::getId() {
  return  ::capnp::json::Value::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RpcMessage::Builder::setId( ::capnp::json::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::initId() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::adoptId(
    ::capnp::Orphan< ::capnp::json::Value>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::Value> RpcMessage::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Reader::hasMethod() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasMethod() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RpcMessage::Reader::getMethod() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RpcMessage::Builder::getMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::setMethod( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RpcMessage::Builder::initMethod(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RpcMessage::Builder::adoptMethod(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RpcMessage::Builder::disownMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Reader::isNone() const {
  return which() == RpcMessage::NONE;
}
inline bool RpcMessage::Builder::isNone() {
  return which() == RpcMessage::NONE;
}
inline  ::capnp::Void RpcMessage::Reader::getNone() const {
  KJ_IREQUIRE((which() == RpcMessage::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void RpcMessage::Builder::getNone() {
  KJ_IREQUIRE((which() == RpcMessage::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RpcMessage::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RpcMessage::Reader::isParams() const {
  return which() == RpcMessage::PARAMS;
}
inline bool RpcMessage::Builder::isParams() {
  return which() == RpcMessage::PARAMS;
}
inline bool RpcMessage::Reader::hasParams() const {
  if (which() != RpcMessage::PARAMS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasParams() {
  if (which() != RpcMessage::PARAMS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::Value::Reader RpcMessage::Reader::getParams() const {
  KJ_IREQUIRE((which() == RpcMessage::PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::getParams() {
  KJ_IREQUIRE((which() == RpcMessage::PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::setParams( ::capnp::json::Value::Reader value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::PARAMS);
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::initParams() {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::PARAMS);
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::json::Value>&& value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::PARAMS);
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::Value> RpcMessage::Builder::disownParams() {
  KJ_IREQUIRE((which() == RpcMessage::PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Reader::isResult() const {
  return which() == RpcMessage::RESULT;
}
inline bool RpcMessage::Builder::isResult() {
  return which() == RpcMessage::RESULT;
}
inline bool RpcMessage::Reader::hasResult() const {
  if (which() != RpcMessage::RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasResult() {
  if (which() != RpcMessage::RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::Value::Reader RpcMessage::Reader::getResult() const {
  KJ_IREQUIRE((which() == RpcMessage::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::getResult() {
  KJ_IREQUIRE((which() == RpcMessage::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::setResult( ::capnp::json::Value::Reader value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::RESULT);
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::Value::Builder RpcMessage::Builder::initResult() {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::RESULT);
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::adoptResult(
    ::capnp::Orphan< ::capnp::json::Value>&& value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::RESULT);
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::Value> RpcMessage::Builder::disownResult() {
  KJ_IREQUIRE((which() == RpcMessage::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Reader::isError() const {
  return which() == RpcMessage::ERROR;
}
inline bool RpcMessage::Builder::isError() {
  return which() == RpcMessage::ERROR;
}
inline bool RpcMessage::Reader::hasError() const {
  if (which() != RpcMessage::ERROR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Builder::hasError() {
  if (which() != RpcMessage::ERROR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::RpcMessage::Error::Reader RpcMessage::Reader::getError() const {
  KJ_IREQUIRE((which() == RpcMessage::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::json::RpcMessage::Error::Builder RpcMessage::Builder::getError() {
  KJ_IREQUIRE((which() == RpcMessage::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::setError( ::capnp::json::RpcMessage::Error::Reader value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::RpcMessage::Error::Builder RpcMessage::Builder::initError() {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::ERROR);
  return ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RpcMessage::Builder::adoptError(
    ::capnp::Orphan< ::capnp::json::RpcMessage::Error>&& value) {
  _builder.setDataField<RpcMessage::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, RpcMessage::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::RpcMessage::Error> RpcMessage::Builder::disownError() {
  KJ_IREQUIRE((which() == RpcMessage::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::json::RpcMessage::Error>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int32_t RpcMessage::Error::Reader::getCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RpcMessage::Error::Builder::getCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RpcMessage::Error::Builder::setCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RpcMessage::Error::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Error::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RpcMessage::Error::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RpcMessage::Error::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RpcMessage::Error::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RpcMessage::Error::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RpcMessage::Error::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RpcMessage::Error::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RpcMessage::Error::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RpcMessage::Error::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::Value::Reader RpcMessage::Error::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::json::Value::Builder RpcMessage::Error::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::json::Value::Pipeline RpcMessage::Error::Pipeline::getData() {
  return  ::capnp::json::Value::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RpcMessage::Error::Builder::setData( ::capnp::json::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::Value::Builder RpcMessage::Error::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RpcMessage::Error::Builder::adoptData(
    ::capnp::Orphan< ::capnp::json::Value>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::Value> RpcMessage::Error::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

